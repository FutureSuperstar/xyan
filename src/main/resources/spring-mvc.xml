<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 扫描controller（controller层注入） -->
    <context:component-scan base-package="com.xyan.**.controller"/>

	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
				<value>classpath:message.messages</value>
				<value>classpath:org/hibernate/validator/ValidationMessages</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 每60秒检查更新国际资源文件 -->
		<property name="cacheSeconds" value="60" />
	</bean>

	<!-- 统一的异常处理 -->
	<bean id="handlerExceptionResolver" class="com.xyan.frame.feature.web.exception.AnnotationHandlerMethodExceptionResolver">  
	   	<!--错误页面-->  
		<property name="defaultErrorView" value="page/500"/> 
		<property name="messageConverters">  
	    	<list>  
		        <bean    class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />  
		        <!-- JSON转换器无需设置mediaType,由外部客户端调用时，手动设置相关mediaType -->  
		        <bean    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />  
	       	</list>  
	    </property>  
	</bean> 
	
    <!-- 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的 -->
    <!-- 指定自己定义的validator -->
    <mvc:annotation-driven validator="validator">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="prettyPrint" value="true" />
				<property name="supportedMediaTypes">  
	                <list>  
	                    <value>application/json</value>  
	                    <value>text/json</value>  
	                </list>  
                </property> 
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
    
    <!-- 首页访问控制 -->
	<mvc:view-controller path="/" view-name="redirect:/index" />
	
	<!--配置拦截器, 多个拦截器,顺序执行 -->  
    <mvc:interceptors>
    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <mvc:interceptor>    
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
            <mvc:mapping path="/**" />  
            <bean class="com.xyan.frame.feature.web.interceptors.LogInterceptor"></bean>    
        </mvc:interceptor>  
    </mvc:interceptors>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <!-- cookie最大生命周期为一周 -->
        <property name="cookieMaxAge" value="604800"/>
   		<property name="defaultLocale" value="zh_CN"/>
   		<property name="cookieName" value="Language"></property>
    </bean>

    <!-- 支持返回json(避免IE在ajax请求时，返回json出现下载 ) -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    
    <bean id="mappingJacksonHttpMessageConverter"  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 支持返回json -->

	<!-- jsp resolver -->  
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
	  <property name="prefix" value="/WEB-INF/views/"/>  
	  <property name="suffix" value=".jsp"/>  
	</bean> 
                
    
    <!-- 配置springMVC处理上传文件的信息 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="10485760000"/>
        <property name="maxInMemorySize" value="40960"/>
        <!-- resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常  -->
        <property name="resolveLazily" value="true" />
    </bean>

</beans>
