package com.xyan.blog.model;

/*
 * 消息实体
 * 消息分为留言消息和评论消息
 * 这两种消息都会推送给管理员，并且留言的紧急消息会发送邮件
 */
import java.util.Date;
import java.util.HashMap;

import com.xyan.frame.base.model.BaseModel;


/**
 *@Description: 消息  实体类 
 *				xy_message
 *@Author：wangming
 *@email：18136442251@163.com
 *@Date:2016-05-30 15:25:02
 */
public class MessageModel extends BaseModel{
		
	/**
	 * This field was generated by  CodeGenerator. 
	 * This field corresponds to the database column xy_message.FROM.
	 *发自
	 */
	private Long source;
		
	/**
	 * This field was generated by  CodeGenerator. 
	 * This field corresponds to the database column xy_message.TO.
	 *目标，留言为-1，评论的为文章ID
	 */
	private Long dest;
		
	/**
	 * This field was generated by  CodeGenerator. 
	 * This field corresponds to the database column xy_message.TITLE.
	 *标题
	 */
	private String title;
		
	/**
	 * This field was generated by  CodeGenerator. 
	 * This field corresponds to the database column xy_message.CONTENT.
	 *内容
	 */
	private String content;
		
	/**
	 * This field was generated by  CodeGenerator. 
	 * This field corresponds to the database column xy_message.CREATE_TIME.
	 *创建时间
	 */
	private Date createTime;
	
	/**
	 * This field was generated by  CodeGenerator. 
	 * This field corresponds to the database column xy_message.merge.
	 *是否紧急留言
	 */
	private String merge;
	
	/**
	 * This field was generated by  CodeGenerator. 
	 * This field corresponds to the database column xy_message.read.
	 *是否已阅读
	 */
	private String read;
		
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *发自
	 */
	public void setSource(Long source){
		this.source=source;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *发自
	 */
	public Long getSource(){
		return this.source;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *目标，公共发言为-1
	 */
	public void setDest(Long dest){
		if(dest==null){
			dest=-1L;
		}
		this.dest=dest;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *目标，公共发言为-1
	 */
	public Long getDest(){
		return this.dest;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *标题
	 */
	public void setTitle(String title){
		this.title=title;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *标题
	 */
	public String getTitle(){
		return this.title;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *内容
	 */
	public void setContent(String content){
		this.content=content;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *内容
	 */
	public String getContent(){
		return this.content;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *创建时间
	 */
	public void setCreateTime(Date createTime){
		this.createTime=createTime;
	}
	
	/**
	 * This method was generated by  CodeGenerator. 
	 *创建时间
	 */
	public Date getCreateTime(){
		return this.createTime;
	}

	/**
	 * This method was generated by  CodeGenerator. 
	 *是否紧急留言
	 */
	public String getMerge() {
		return merge;
	}

	/**
	 * This method was generated by  CodeGenerator. 
	 *是否紧急留言
	 */
	public void setMerge(String merge) {
		this.merge = merge;
	}

	/**
	 * This method was generated by  CodeGenerator. 
	 *是否已阅读
	 */
	public String getRead() {
		return read;
	}

	/**
	 * This method was generated by  CodeGenerator. 
	 *是否已阅读
	 */
	public void setRead(String read) {
		this.read = read;
	}
		
	
	public HashMap<String,Object> toHashMap(){
		HashMap<String,Object> map=new HashMap<>();
		map.put("id", super.getId());
		map.put("content",this.content);
		map.put("createTime",this.createTime);
		map.put("dest",this.dest);
		map.put("merge",this.merge);
		map.put("read",this.read);
		map.put("source",this.source);
		map.put("title",this.title);
		return map;
	}
}